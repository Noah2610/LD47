// src/settings/objects_settings.rs
#![enable(implicit_some)]
{
    "Solid": (
        components: [
            Collidable((
                tag: Solid,
            )),
            Solid((
                tag: Solid,
            )),
            Hitbox(Size),
        ],
        events: {},
    ),

    "SolidFight": (
        components: [
            Collidable((
                tag: Solid,
            )),
            Solid((
                tag: Solid,
            )),
            Hitbox(Size),
        ],
    ),

    "PlayerBullet": (
        spritesheet: "bullets.png",
        components: [
            Size((
                w: 8.0,
                h: 8.0,
            )),
            Velocity((
                x: 0.0,
                y: 100.0,
            )),
            Animation([
                (3, 100),
                (4, 100),
                (5, 100),
            ]),
            Collidable((
                tag: PlayerBullet,
            )),
            Collider((
                tag: PlayerBullet,
            )),
            Hitbox(Size),
        ],
        events: {
            OnCollision(And([IsTag(AlarmBoss), IsState(Enter)])): [
                StartTimer("Delete", 10),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),

    "AlarmBullet": (
        spritesheet: "bullets.png",
        components: [
            Size((
                w: 8.0,
                h: 8.0,
            )),
            Velocity((
                x: 0.0,
                y: -100.0,
            )),
            Animation([
                (0, 100),
                (1, 100),
                (2, 100),
            ]),
            Collidable((
                tag: AlarmBullet,
            )),
            Collider((
                tag: AlarmBullet,
            )),
            Hitbox(Size),
        ],
        events: {
            OnCollision(And([IsTag(Player), IsState(Enter)])): [
                StartTimer("Delete", 10),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),

    // -------
    // SCENE 1
    // -------

    "Plant": (
        spritesheet: "scene1/plant.png",
        components: [
            Size((
                w: 24.0,
                h: 32.0,
            )),
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
            Animations({ Idle: Cycle([ (6, 1000), ]), }),
            InLoop(0, [ Animations({ Idle: Cycle([ (0, 1000), ]), }), ]),
            InLoop(1, [ Animations({ Idle: Cycle([ (1, 1000), ]), }), ]),
            InLoop(2, [ Animations({ Idle: Cycle([ (2, 1000), ]), }), ]),
            InLoop(3, [ Animations({ Idle: Cycle([ (3, 1000), ]), }), ]),
            InLoop(4, [ Animations({ Idle: Cycle([ (4, 1000), ]), }), ]),
            InLoop(5, [ Animations({ Idle: Cycle([ (5, 1000), ]), }), ]),
            InLoop(6, [ Animations({ Idle: Cycle([ (6, 1000), ]), }), ]),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                SetOutput(
                    text: "Huxley has seen better days, but he's a fighter.",
                ),
            ],
        },
    ),

    "Shoes": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
            TextLines({
                "Inspect": (
                    lines: [
                        "A pair of comically large loafers. They were passed down to me by my uncle.",
                        "A pair of loafers. They don't quite fit.",
                    ],
                    behavior: Sequence(loop: true),
                ),
            }),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                OutputNextLine(
                    id: "Inspect",
                ),
            ],
        },
    ),

    "Painting": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                SetOutput(
                    text: "This has been here for as long as I remember.\nThe years have left it stained with a thick, yellow tint.",
                ),
            ],
        },
    ),

    "Filth": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                SetOutput(
                    text: "Filth.",
                ),
            ],
        },
    ),

    "Bed": (
        spritesheet: "bed.png",
        components: [
            Size((
                w: 42.0,
                h: 32.0,
            )),
            Animations({
                Idle: Cycle([
                    (1, 1000),
                ]),
                Custom("Sleep"): Cycle([
                    (0, 1000)
                ]),
            }),
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
            TextLines({
                "Inspect": (
                    lines: [
                        "My only friend.",
                        "I feel as if the cozy sheets are calling for me.",
                    ],
                    behavior: Sequence(loop: true),
                ),
            }),
        ],

        events: {
            Init: [
                PlayAnimation(Custom("Sleep")),
            ],

            OnInteract: [
                If((
                    if: Equal(
                        ForeignObjectValue(Player, Var("is_controllable")),
                        Val(true),
                    ),
                    then: [
                        PlaySound("Interact"),
                        OutputNextLine(
                            id: "Inspect",
                        ),
                    ],
                    else: [
                        PlayAnimation(Idle),
                        ForeignObjectAction(
                            Player,
                            [
                                SetControllable(true),
                                Show,
                                SetVariable("is_controllable", true),
                                ClearOutput(
                                    target: "ingame_output_text_get_up",
                                ),
                            ],
                        ),
                        ForeignObjectAction(Custom("Alarm"), [
                            StartTimer("StopAlarm", 0),
                        ]),
                    ],
                )),
            ],
        },
    ),

    "Door": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
        ],

        events: {
            Init: [
                SetVariable("did_enter", false),
            ],

            OnInteract: [
                If((
                    if: Equal(Var("did_enter"), Val(false)),
                    then: [
                        SetVariable("did_enter", true),
                        PlaySound("SceneTransition"),
                        ForeignObjectAction(Player, [SetControllable(false)]),
                        Fade((
                            type: FadeOut,
                            duration_ms: 500,
                        )),
                        StartTimer("NextScene", 1000),
                    ],
                )),
            ],

            OnTimerFinish("NextScene"): [
                NextScene,
            ],
        },
    ),

    "Alarm": (
        spritesheet: "alarm.png",
        components: [
            Size((
                w: 32.0,
                h: 48.0,
            )),
            Collidable((
                tag: Interactable,
            )),
            Hitbox(Custom([
                (
                    top:    0.0,
                    bottom: 24.0,
                    left:   -16.0,
                    right:  4.0,
                ),
            ])),
            Animations({
                Idle: Cycle([
                    (0, 1000),
                ]),
                Custom("Ring"): Cycle([
                    (48, 500),
                    (49, 500),
                ]),
            }),
            Interactable(()),
            TextLines({
                "Ring": (
                    lines: [
                        "Ring Ring",
                        "Ring Ring",
                        "Ring Ring",
                        "Ring Ring",
                        "Ring Ring",
                        "Ringggg.... ringg....... ring?",
                        "Hello-oh! Anyone home?",
                        "Rise and shine, buddy!",
                        "Goodmorning sunshine! Time to greet another beautiful day!",
                        "<name>? I'm right here, buddy.",
                        "Press me :)",
                        "Press me. That's how clocks work, you know?",
                        "You DO know, right?",
                        "Press me. That's how clocks work, in case you forgot.",
                        "Obey me, mortal, or suffer the conseque-",
                        "*Press me buddy :)",
                        "...",
                        "press me. now.",
                        "PRESS ME. NOW.",
                        "PRESS ME YOU ****" ,
                        "PRESS ME YOU ****** *** OR I WILL ******** AND ***** *** YOUR ****** YOU ***** *******",
                        "****** **** *** ***** **** ***** *** ***** **** ******* ******",
                    ],
                    behavior: Sequence(loop: false),
                ),
            }),
        ],

        events: {
            Init: [
                SetVariable("text_idx", 0),
                SetVariable("intense_shake", false),
                SetVariable("alarm_fight", false),
                PlayAnimation(Custom("Ring")),
                StartTimer("Text", 500),
                StartTimer("Sound", 500),
            ],

            OnTimerFinish("Text"): [
                If((
                    if: LessThan(Var("text_idx"), Val(5)),
                    then: [
                        OutputNextLine(
                            id: "Ring",
                            scroll: true,
                        ),
                        StartTimer("Text", 2000),
                    ],
                    else: [
                        If((
                            if: LessThan(Var("text_idx"), Val(15)),
                            then: [
                                OutputNextLine(
                                    id: "Ring",
                                    scroll: true,
                                ),
                                StartTimer("Text", 4000),
                            ],
                            else: [
                                If((
                                    if: Equal(Var("text_idx"), Val(15)),
                                    then: [
                                        // obey me
                                        OutputNextLine(
                                            id: "Ring",
                                            scroll: true,
                                        ),
                                        StartTimer("Text", 1800),
                                    ],
                                    else: [
                                        If((
                                            if: Equal(Var("text_idx"), Val(16)),
                                            then: [
                                                // after obey me
                                                OutputNextLine(
                                                    id: "Ring",
                                                ),
                                                StartTimer("Text", 4000),
                                            ],
                                            else: [
                                                If((
                                                    if: Equal(Var("text_idx"), Val(19)),
                                                    then: [
                                                        SetVariable("intense_shake", true),
                                                    ],
                                                )),
                                                If((
                                                    if: GreaterThan(Var("text_idx"), Val(21)),
                                                    then: [
                                                        OutputNextLine(
                                                            id: "Ring",
                                                            scroll: true,
                                                        ),
                                                        StartTimer("StartFight", 4000),
                                                    ],
                                                    else: [
                                                        OutputNextLine(
                                                            id: "Ring",
                                                            scroll: true,
                                                        ),
                                                        StartTimer("Text", 4000),
                                                    ],
                                                )),
                                            ],
                                        )),
                                    ],
                                )),
                            ],
                        )),
                    ],
                )),
                StartTimer("CountTextIdx", 10),
            ],

            OnTimerFinish("CountTextIdx"): [
                OpAddVariable("text_idx", 1),
            ],

            OnTimerFinish("Sound"): [
                If((
                    if: Equal(Var("intense_shake"), Val(true)),
                    then: [
                        ScreenShake((
                            duration_ms: 670,
                            strength: 4.0,
                            shake_delay_ms: 5,
                        )),
                    ],
                    else: [
                        ScreenShake((
                            duration_ms: 670,
                            strength: 0.5,
                            shake_delay_ms: 10,
                        )),
                    ],
                )),
                PlaySound("Alarm"),
                StartTimer("Sound", 1000),
            ],

            OnTimerFinish("StopAlarm"): [
                PlayAnimation(Idle),
                StopTimer("Text"),
                StopTimer("Sound"),
                PlaySound("Interact"),
                ClearOutput(),
            ],

            OnTimerFinish("StartFight"): [
                SetVariable("alarm_fight", true),
                SpawnObject((
                    object: Custom("AlarmBoss"),
                    offset: (0.0, 0.0, 1.0),
                    size: (32.0, 48.0),
                )),
                ClearOutput(),
                ClearOutput(
                    target: "ingame_output_text_get_up",
                ),
                StartTimer("InitFight", 3000),
                StartTimer("Hide", 100),
            ],

            OnTimerFinish("Hide"): [
                Hide
            ],

            OnTimerFinish("InitFight"): [
                ForeignObjectAction(Player, [
                    StartTimer("StartFight", 0),
                ]),
                ForeignObjectAction(Custom("Bed"), [DeleteEntity]),
                ForeignObjectAction(Custom("Painting"), [DeleteEntity]),
                ForeignObjectAction(Custom("Shoes"), [DeleteEntity]),
                ForeignObjectAction(Custom("Door"), [DeleteEntity]),
                ForeignObjectAction(Custom("Plant"), [DeleteEntity]),
                ForeignObjectAction(Custom("Filth"), [DeleteEntity]),
                ForeignObjectAction(Custom("Solid"), [DeleteEntity]),
                ForeignObjectAction(Custom("BgFragment1"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment2"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment3"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment4"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment5"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment6"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment7"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment8"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment9"), [StartTimer("StartFight", 0)]),
                ForeignObjectAction(Custom("BgFragment10"), [StartTimer("StartFight", 0)]),
                ClearOutput(),
                ClearOutput(
                    target: "ingame_output_text_get_up",
                ),
                StartTimer("Delete", 100),
            ],

            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),

    "AlarmBoss": (
        spritesheet: "alarm.png",
        components: [
            Size((
                w: 32.0,
                h: 48.0,
            )),
            Collider((
                tag: AlarmBoss,
            )),
            Hitbox(Size),
            Animations({
                Custom("Spawn"): Once([
                    (0,  100),
                    (1,  100),
                    (0,  100),
                    (1,  100),
                    (0,  100),
                    (1,  100),

                    (2,  100),
                    (3,  100),
                    (2,  100),
                    (3,  100),
                    (2,  100),
                    (3,  100),

                    (4,  100),
                    (5,  100),
                    (6,  100),
                    (7,  100),
                    (8,  100),
                    (9,  100),
                    (10, 100),
                    (11, 100),
                    (12, 100),
                    (13, 100),
                    (14, 100),
                    (15, 100),
                    (16, 100),
                    (17, 100),
                    (18, 100),
                    (19, 100),
                    (20, 100),
                    (21, 100),
                    (22, 100),
                    (23, 100),
                ]),
                Idle: Cycle([
                    (24, 100),
                    (25, 100),
                    (26, 100),
                    (27, 100),
                    (28, 100),
                    (29, 100),
                    (30, 100),
                    (31, 100),
                    (32, 100),
                    (33, 100),
                ]),
            }),
            Velocity((x: 0.0, y: 0.0)),
        ],

        events: {
            Init: [
                SetVariable("health_countdown", 5),
                StopSong(MainBgm),
                PlaySong(BossFight),
                PushAnimation(Custom("Spawn")),
                StartTimer("Init", 3200),
            ],

            OnTimerFinish("Init"): [
                SetVariable("move_dir", "Right"),
                SetVelocity(x: 50.0, y: 100.0),
                StartTimer("KillY", 300),
                StartTimer("InitSwitchDir", 3000),
                StartTimer("Shoot", 1000),
            ],

            OnTimerFinish("KillY"): [
                SetVelocity(y: 0.0),
            ],

            OnTimerFinish("Shoot"): [
                SpawnObject((
                    object: Custom("AlarmBullet"),
                    offset: (0.0, -10.0, 1.0),
                    size: (8.0, 8.0),
                )),
                StartTimer("Shoot", 1000),
            ],

            OnTimerFinish("InitSwitchDir"): [
                If((
                    if: Equal(Var("move_dir"), Val("Right")),
                    then: [
                        SetVariable("move_dir", "Left"),
                        SetVelocity(x: -50.0),
                    ],
                    else: [
                        SetVariable("move_dir", "Right"),
                        SetVelocity(x: 50.0),
                    ],
                )),
                StartTimer("SwitchDir", 4500),
            ],

            OnTimerFinish("SwitchDir"): [
                If((
                    if: Equal(Var("move_dir"), Val("Right")),
                    then: [
                        SetVariable("move_dir", "Left"),
                        SetVelocity(x: -50.0),
                    ],
                    else: [
                        SetVariable("move_dir", "Right"),
                        SetVelocity(x: 50.0),
                    ],
                )),
                StartTimer("SwitchDir", 4500),
            ],

            OnCollision(And([IsTag(PlayerBullet), IsState(Enter)])): [
                OpSubVariable("health_countdown", 1),
                If((
                    if: LessThan(Var("health_countdown"), Val(1)),
                    then: [
                        Echo("GAME OVER!"),
                    ],
                )),
            ],
        },
    ),

    // ---

    // -------
    // SCENE 3
    // -------

    "Scene3Bg": (
        spritesheet: "scene3/bg.png",
        components: [
            Size((
                w: 512.0,
                h: 144.0,
            )),
        ],
    ),

    "Dustbin": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                SetOutput(
                    text: "A dustbin.\nIt's offensively generic.",
                ),
            ],
        },
    ),

    "DustbinBloody": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                SetOutput(
                    text: "A dustbin.\nIt's got some Charlie on it.",
                ),
            ],
        },
    ),

    "Locker": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                SetOutput(
                    text: r#"The Boss's locker.
Its doors are permanently locked.
I tremble at the thought of what horrors may lie behind them."#,
                ),
            ],
        },
    ),

    "Whiteboard": (
        spritesheet: "scene3/whiteboard.png",

        components: [
            Size((
                w: 56.0,
                h: 32.0,
            )),
            Animation([(1, 1000)]),
            InLoop(0, [Animation([(0, 1000)])])
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                SetOutput(
                    text: ""
                ),
            ],
        },
    ),

    "TableBg": (
        spritesheet: "scene3/table_bg.png",
        components: [
            Size((
                w: 48.0,
                h: 48.0,
            )),
            Animation([
                (0, 3000),
                (1, 3000),
                (2, 3000),
                (3, 3000),
            ]),
        ],
    ),

    "TableFg": (
        spritesheet: "scene3/table_fg.png",
        components: [
            Size((
                w: 48.0,
                h: 48.0,
            )),
            Animation([(0, 1000)]),
        ],
    ),

    "TableBoss": (
        spritesheet: "scene3/table_boss.png",
        components: [
            Size((
                w: 68.0,
                h: 32.0,
            )),
            Animation([(0, 1000)]),
        ],
    ),

    "TableBossShadow": (
        spritesheet: "scene3/table_boss_shadow.png",
        components: [
            Size((
                w: 68.0,
                h: 32.0,
            )),
            Animation([(0, 1000)]),
        ],
    ),

    "Coworker1": (
        spritesheet: "scene3/coworker_1.png",
        components: [
            Size((
                w: 32.0,
                h: 32.0,
            )),
            Animations({
                Idle: Cycle([
                    (0, 400),
                    (1, 400),
                ]),
                Custom("Talk"): Once([
                    (0, 100),
                    (1, 100),
                    (0, 100),
                    (1, 100),
                    (0, 100),
                    (1, 100),
                    (0, 100),
                    (1, 100),
                ]),
                Custom("HeadScratch"): Once([
                    (10, 100),
                    (11, 100),
                    (12, 100),
                    (13, 100),
                    (14, 100),
                    (15, 100),
                    (16, 100),
                    (17, 100),
                    (18, 500),
                ]),
            }),
            Hitbox(Custom([
                (
                    top:    16.0,
                    bottom: -16.0,
                    left:   -10.0,
                    right:  10.0,
                ),
            ])),
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                PlaySound("BossScream1"),
                PushAnimation(Custom("Talk")),
                SetOutput(
                    text: "The boss is having one of his episodes again.\nEarlier he threw a dustbin at Charlie.",
                    scroll: true,
                ),
                FaceTowardsObject(Player),
            ],
        },
    ),

    "CharlieDynamic": (
        spritesheet: "scene3/charlie_dynamic.png",
        components: [
            Size((
                w: 32.0,
                h: 48.0,
            )),
            Animations({
                Idle: Cycle([
                    (0, 1000),
                ]),
                Custom("Talk"): Once([
                    (4, 100),
                    (5, 100),
                    (6, 100),
                    (7, 2000),
                    (6, 100),
                    (5, 100),
                    (4, 100),
                ]),
            }),
            Hitbox(Custom([
                (
                    top:    16.0,
                    bottom: -24.0,
                    left:   -8.0,
                    right:  8.0,
                ),
            ])),
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
        ],

        events: {
            OnInteract: [
                PlaySound("Interact"),
                FaceTowardsObject(Player),
                PushAnimation(Custom("Talk")),
                SetOutput(
                    text: "Is that you, <name>?\nSorry, I'm having some trouble with my vision right now.",
                    scroll: true,
                ),
            ],
        },
    ),

    "CharlieStatic": (
        spritesheet: "scene3/charlie_static.png",
        components: [
            Size((
                w: 32.0,
                h: 48.0,
            )),
            Animation([(0, 1000)]),
        ],
    ),

    "OfficeDoor": (
        components: [
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
            Hitbox(Size),
        ],

        events: {
            Init: [
                SetVariable("can_leave", false),
            ],

            OnInteract: [
                If((
                    if: Equal(Var("can_leave"), Val(true)),
                    then: [
                        PlaySound("SceneTransition"),
                        ForeignObjectAction(Player, [SetControllable(false)]),
                        Fade((
                            type: FadeOut,
                            duration_ms: 500,
                        )),
                        StartTimer("NextScene", 1000),
                    ],
                    else: [
                        SetOutput(text: "I wish."),
                    ],
                ))
            ],

            OnTimerFinish("NextScene"): [
                NextScene,
            ],
        },
    ),

    "Clock": (
        spritesheet: "scene3/clock.png",
        components: [
            Size((
                w: 16.0,
                h: 16.0,
            )),
            Animations({
                Idle: Cycle([(0, 1000)]),
                Custom("0"): Cycle([
                    (0, 1000),
                ]),
                Custom("1"): Cycle([
                    (1, 1000),
                ]),
                Custom("2"): Cycle([
                    (2, 1000),
                ]),
                Custom("3"): Cycle([
                    (3, 1000),
                ]),
                Custom("4"): Cycle([
                    (4, 1000),
                ]),
                Custom("5"): Cycle([
                    (5, 1000),
                ]),
            }),
        ],
        events: {
            Init: [
                SetVariable("anim", 0),
            ],

            OnTimerFinish("NextAnim"): [
                OpAddVariable("anim", 1),
                If((
                    if: Equal(Var("anim"), Val(0)),
                    then: [
                        PlayAnimation(Custom("0")),
                    ],
                )),
                If((
                    if: Equal(Var("anim"), Val(1)),
                    then: [
                        PlayAnimation(Custom("1")),
                    ],
                )),
                If((
                    if: Equal(Var("anim"), Val(2)),
                    then: [
                        PlayAnimation(Custom("2")),
                    ],
                )),
                If((
                    if: Equal(Var("anim"), Val(3)),
                    then: [
                        PlayAnimation(Custom("3")),
                    ],
                )),
                If((
                    if: Equal(Var("anim"), Val(4)),
                    then: [
                        PlayAnimation(Custom("4")),
                    ],
                )),
                If((
                    if: Equal(Var("anim"), Val(5)),
                    then: [
                        PlayAnimation(Custom("5")),
                    ],
                )),
                If((
                    if: GreaterThan(Var("anim"), Val(5)),
                    then: [
                        SetVariable("anim", 0),
                        PlayAnimation(Custom("0")),
                    ],
                )),
            ],
        },
    ),

    "Boss": (
        spritesheet: "scene3/boss.png",
        components: [
            Size((
                w: 64.0,
                h: 64.0,
            )),
            Animations({
                Idle: Cycle([
                    (10, 200),
                    (11, 200),
                ]),
                Walk: Cycle([
                    (20, 100),
                    (21, 100),
                    (22, 250),
                    (23, 100),
                    (24, 100),
                    (25, 100),
                    (26, 100),
                    (27, 250),
                    (28, 100),
                    (29, 100),
                ]),
            }),
            Gravity((
                y: -800.0,
            )),
            Hitbox(Size),
            Solid((
                tag: Player,
            )),
            Collider((
                tag: Boss,
            )),
            Collidable((
                tag: Boss,
            )),
            Hitbox(Size),
            Interactable(()),
            TextLines({
                "Greet": (
                    lines: [
                        "You're late.\nNow get to work!",
                    ],
                    behavior: Sequence(loop: false),
                ),
                "Button": (
                    lines: [
                        "Stop slacking off and get back to work.\nThose buttons on your desk require some pressing!",
                        "Those buttons won't press themselves",
                        "It's quite simple, you see.\nYou're the dedicated button presser and there are some buttons that require pressing.",
                        "\"Overqualified?\" What's that supposed to mean, smart-ass?",
                        "The buttons <name>, THE BUTTONS!",
                        "Stop ignoring your boss and press. The. BUTTONS.",
                        "Do what I am paying you for and PRESS THE BUTTONS.",
                        "What was that? I'm not paying you? So what?",
                        "THE BUTTONS, <NAME>, PRESS THE BUTTOOOONNNNNS! AAAARRRRGH!!!",
                        "AAAAAAAAARSDFRHSDLIFNJSNR",
                        "AAAAAAAAAAAAAAOLKUJLKLKLSDLKMFLKSNDFLKJNDSF",
                    ],
                    behavior: Sequence(loop: false),
                ),
                "Coffee": (
                    lines: [
                        "Now make me a cup of coffee, will you?",
                        "Did you not hear me, <name>? I desire a cup of coffee.",
                        "Funny, I could swear I just asked for a cup of coffee.",
                        "Don't make me repeat myself.",
                        "Are you deaf, kid? I SAID COFFEE.",
                        "Coffee. Now.",
                        "Where. Is. My. COFFEE?!",
                        "DO YOU NEED ME TO SPELL IT OUT FOR YOU? C - O - F....",
                        "COFFEE! COFFEE!",
                        "Coffee... Coffee....... COFFEEEEEEEEEEEE!",
                        "COFFE. NOW. AAAAARRRGHGH",
                        "AAAAAAAAARHRHRHGHGHGGGGGGHHRHR",
                        "AAAAAAAAAAAAAAAAAAAAAOLJFNSDLKFNJSLAOLIKSDOLKFJNKSJDNFKJS",
                    ],
                    behavior: Sequence(loop: false),
                ),
                "TaskComplete": (
                    lines: [
                        "Excellent.",
                        "Good enough.",
                    ],
                    behavior: Random,
                ),
                "DayComplete": (
                    lines: [
                        "That's it for today.\nNow get out of here.",
                    ],
                    behavior: Random,
                ),
            }),
            Velocity((x: 0.0, y: 0.0)),
        ],

        events: {
            Init: [
                SetVariable("reached_desk", false),
                SetVariable("current_task", Null),
                SetVariable("task_loops", 0),
                SetVariable("day_complete", false),
                StartTimer("InitGreet", 1000),
            ],

            OnTimerFinish("InitGreet"): [
                FaceTowardsObject(Player),
                StartTimer("Greet", 1000),
            ],

            OnTimerFinish("Greet"): [
                OutputNextLine(
                    id: "Greet",
                    scroll: true,
                ),
                PlaySound("BossScream1"),
                StartTimer("StartMovingToDesk", 2000),
            ],

            OnTimerFinish("StartMovingToDesk"): [
                SetVelocity(x: 24.0),
            ],

            OnCollision(And([IsTag(BossTableHitbox), IsState(Enter)])): [
                SetVariable("reached_desk", true),
                SetVelocity(x: 0.0),
            ],

            OnCollision(IsTag(Player)): [
                If((
                    if: And([
                        Equal(Var("reached_desk"), Val(true)),
                        Equal(Var("day_complete"), Val(false)),
                        Equal(Var("current_task"), Val(Null)),
                    ]),
                    then: [
                        SetVariable("current_task", "Button"),
                        OutputNextLine(
                            id: "Button",
                            scroll: true,
                        ),
                        PlaySound("BossScream2"),
                        StartTimer("Button", 8000),
                    ],
                )),
            ],

            OnTimerFinish("Button"): [
                OutputNextLine(
                    id: "Button",
                    scroll: true,
                ),
                PlaySound("BossScream2"),
                StartTimer("Button", 4000),
            ],

            OnTimerFinish("ButtonPress"): [
                If((
                    if: Equal(Var("current_task"), Val("Coffee")),
                    then: [
                        SetVariable("current_task", "Coffee"),
                        OutputNextLine(
                            id: "TaskComplete",
                            scroll: true,
                        ),
                        PlaySound("BossScream2"),
                        StopTimer("Button"),
                        StartTimer("Coffee", 2000),
                        ForeignObjectAction(Custom("Clock"), [StartTimer("NextAnim", 0)]),
                    ],
                )),
            ],

            OnTimerFinish("Coffee"): [
                OutputNextLine(
                    id: "Coffee",
                    scroll: true,
                ),
                PlaySound("BossScream2"),
                StartTimer("Coffee", 4000),
            ],

            OnTimerFinish("CoffeeMake"): [
                If((
                    if: Equal(Var("current_task"), Val("Coffee")),
                    then: [
                        SetVariable("current_task", "Button"),
                        OutputNextLine(
                            id: "TaskComplete",
                            scroll: true,
                        ),
                        PlaySound("BossScream2"),
                        StopTimer("Coffee"),
                        StartTimer("Button", 2000),
                        ForeignObjectAction(Custom("Clock"), [StartTimer("NextAnim", 0)]),
                        OpAddVariable("task_loops", 1),
                        StartTimer("CheckComplete", 100),
                    ],
                )),
            ],

            OnTimerFinish("CheckComplete"): [
                If((
                    if: GreaterThan(Var("task_loops"), Val(4)),
                    then: [
                        StopTimer("Button"),
                        StopTimer("Coffee"),
                        StartTimer("DayComplete", 1000),
                    ],
                )),
            ],

            OnTimerFinish("DayComplete"): [
                OutputNextLine(
                    id: "DayComplete",
                    scroll: true,
                ),
                PlaySound("BossScream2"),
                ForeignObjectAction(Custom("OfficeDoor"), [SetVariable("can_leave", true)]),
            ],
        },
    ),

    "BossTableHitbox": (
        components: [
            Hitbox(Size),
            Collidable((
                tag: BossTableHitbox,
            )),
        ],
    ),

    "BossSplooch": (
        spritesheet: "scene3/boss_splooch.png",
        components: [
            Size((
                w: 110.0,
                h: 76.0,
            )),
            Animation([(0, 1000)]),
        ],
        events: {
            Init: [
                Hide,
            ],
        },
    ),

    "Button": (
        components: [
            Hitbox(Size),
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
        ],
        events: {
            OnInteract: [
                PlaySound("ButtonPress"),
                ForeignObjectAction(
                    Custom("Boss"),
                    [
                        StartTimer("PressedButton", 0),
                    ],
                ),
            ],
        },
    ),

    "CoffeeMaker": (
        components: [
            Hitbox(Size),
            Collidable((
                tag: Interactable,
            )),
            Interactable(()),
        ],
        events: {
            OnInteract: [
                PlaySound("CoffeeMaker"),
                ForeignObjectAction(
                    Custom("Boss"),
                    [
                        StartTimer("CoffeeMake", 11000),
                    ],
                ),
            ],
        },
    ),

    // ------------
    // BG FRAGMENTS
    // ------------

    "BgFragment1": (
        spritesheet: "scene1/bg_fragments/bgf1.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    x: -60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment2": (
        spritesheet: "scene1/bg_fragments/bgf2.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    y: -60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment3": (
        spritesheet: "scene1/bg_fragments/bgf3.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    x: -60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment4": (
        spritesheet: "scene1/bg_fragments/bgf4.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    y: 60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment5": (
        spritesheet: "scene1/bg_fragments/bgf5.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    y: -60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment6": (
        spritesheet: "scene1/bg_fragments/bgf6.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    x: -60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment7": (
        spritesheet: "scene1/bg_fragments/bgf7.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    y: 60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment8": (
        spritesheet: "scene1/bg_fragments/bgf8.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    x: 60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment9": (
        spritesheet: "scene1/bg_fragments/bgf9.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    y: 60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
    "BgFragment10": (
        spritesheet: "scene1/bg_fragments/bgf10.png",
        components: [
            Velocity(( x: 0.0, y: 0.0 )),
        ],
        events: {
            OnTimerFinish("StartFight"): [
                SetVelocity(
                    x: 60.0,
                ),
                StartTimer("Delete", 10000),
            ],
            OnTimerFinish("Delete"): [
                DeleteEntity,
            ],
        },
    ),
}
